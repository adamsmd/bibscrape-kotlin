import org.eclipse.jgit.api.Git

plugins {
  kotlin("jvm") // version determined by buildSrc/build.gradle.kts
  application

  // Documentation
  id("org.jetbrains.dokka") version "1.7.20" // Adds: ./gradlew dokka{Gfm,Html,Javadoc,Jekyll}

  // Code Formatting
  id("com.diffplug.spotless") version "6.13.0"
  // Subsumes:
  // - id("org.jlleitschuh.gradle.ktlint") version "10.2.1" // Adds: ./gradlew ktlintCheck (requires disabling diktat)
  // - id("com.ncorti.ktfmt.gradle") version "0.11.0"
  // - id("org.cqfn.diktat.diktat-gradle-plugin") version "1.0.3" // Adds: ./gradlew diktatCheck

  id("io.gitlab.arturbosch.detekt").version("1.22.0") // Adds: ./gradlew detekt

  // Code Coverage
  id("jacoco") // Adds: ./gradlew jacocoTestReport
  id("org.jetbrains.kotlinx.kover") version "0.6.1" // Adds: ./gradlew koverMergedHtmlReport

  // Dependency Versions
  // id("de.fayard.refreshVersions") version "0.51.0"
  id("com.github.ben-manes.versions") version "0.44.0" // Adds: ./gradlew dependencyUpdates

  // Dependency Licenses
  id("com.github.jk1.dependency-license-report") version "2.1" // Adds: ./gradlew generateLicenseReport

  // Typesafe config
}

repositories {
  mavenCentral()
  maven { url = uri("https://dev.bibsonomy.org/maven2/") }
}

dependencies {
  // Testing
  testImplementation(kotlin("test:1.8.0"))

  // NOTE: These groups are sorted alphabetically

  // BibTeX
  // $ wget -r -R html,dvi,ltx,pdf,ps.gz,ps.xz,sok,twx,db -R RCS -R idx -R toc -R 'bib*' -R 'filehdr-*' --continue ftp://ftp.math.utah.edu/pub/tex/bib/
  implementation("org.bibsonomy:bibsonomy-bibtex-parser:3.9.4")
  implementation("org.jbibtex:jbibtex:1.0.20")

  // Command-line argument parsing
  implementation("com.github.ajalt.clikt:clikt:3.5.1")

  // Logging
  implementation("ch.qos.logback:logback-classic:1.2.6")
  implementation("io.github.microutils:kotlin-logging-jvm:2.1.21")

  // WebDriver
  implementation("org.seleniumhq.selenium:selenium-java:4.7.2")
}

tasks.test {
  useJUnitPlatform()
}

application {
  mainClass.set("org.michaeldadams.bibscrape.MainKt")
}

// ////////////////////////////////////////////////////////////////
// Version Information
// Create a new version with: git tag -a v2023.01.01
task("version") { println(project.version) }

Git.open(project.rootDir).use { git ->
  val describe = git.describe().apply { setMatch("v*") }.call()
  val isClean = git.status().call().isClean
  project.version =
    describe
      .removePrefix("v")
      .plus(if (isClean) { "" } else { "-dirty" })
}

fun generateSrc(fileName: String, code: String) {
  val generatedSrcDir = File(buildDir, "generated/main/kotlin")
  generatedSrcDir.mkdirs()
  kotlin.sourceSets["main"].kotlin.srcDir(generatedSrcDir)
  val file = File(generatedSrcDir, fileName)
  file.writeText(code)
}

val generateBuildInfo by tasks.registering {
  doLast {
    // TODO: avoid running when unchanged

    val code = """
      // Do not edit this file by hand.  It is generated by `gradle`.
      package org.michaeldadams.bibscrape

      /** This object was generated by `gradle`. */
      object BuildInformation {
        val version: String = "${project.version}"
      }
      """.trimIndent().trimStart()

    generateSrc("BuildInformation.kt", code)
  }
}

// ////////////////////////////////////////////////////////////////
// Code Formatting

// https://github.com/jlleitschuh/ktlint-gradle/blob/master/plugin/src/main/kotlin/org/jlleitschuh/gradle/ktlint/KtlintExtension.kt
// ktlint {
//   verbose.set(true)
//   ignoreFailures.set(true)
//   enableExperimentalRules.set(true)
//   disabledRules.set(
//     setOf(
//       "experimental:argument-list-wrapping",
//       "no-wildcard-imports",
//     )
//   )
// }

// // https://github.com/analysis-dev/diktat/blob/master/diktat-gradle-plugin/src/main/kotlin/org/cqfn/diktat/plugin/gradle/DiktatExtension.kt
// diktat {
//   ignoreFailures = true
// }

// https://github.com/detekt/detekt/blob/main/detekt-gradle-plugin/src/main/kotlin/io/gitlab/arturbosch/detekt/extensions/DetektExtension.kt
// detekt {
//   ignoreFailures = true
//   buildUponDefaultConfig = true
//   allRules = true
// }

// ////////////////////////////////////////////////////////////////
// Generic Configuration

tasks.withType<Test> {
  // Use JUnit Platform for unit tests.
  useJUnitPlatform()

  this.testLogging {
    this.showStandardStreams = true
  }
}

// tasks.withType<org.jetbrains.dokka.gradle.DokkaTask>().configureEach {
//   dokkaSourceSets {
//     named("main") {
//       includes.from("Module.md")
//     }
//   }
// }

// For why we have to fully qualify KotlinCompile see:
// https://stackoverflow.com/questions/55456176/unresolved-reference-compilekotlin-in-build-gradle-kts
tasks.withType<org.jetbrains.kotlin.gradle.tasks.KotlinCompile> {
  // Avoid the warning: 'compileJava' task (current target is 11) and
  // 'compileKotlin' task (current target is 1.8) jvm target compatibility should
  // be set to the same Java version.
  // kotlinOptions { jvmTarget = project.java.targetCompatibility.toString() }

  dependsOn(generateBuildInfo)
}
